import fileinput
import time
import curses

treemap = [line.rstrip() for line in fileinput.input() if line.rstrip()]
pos = [0, 0]
direction = [3, 1]
speed = 2


def has_tree(x, y):
    return treemap[y][x % (len(treemap[0]))] == '#'


def main(stdscr):
    maxrow = curses.LINES - 1
    maxcol = curses.COLS - 1
    stdscr.clear()
    curses.curs_set(False)  # remove cursor highlight

    # color init
    curses.use_default_colors()
    for i in range(0, curses.COLORS):
        curses.init_pair(i, i, -1)

    elapsed_time = 0
    collisions = 0
    while True:
        time.sleep(1/speed)
        pos[0] += direction[0]
        pos[1] += direction[1]
        if has_tree(pos[0], pos[1]):
            collisions += 1
        if pos[1] > len(treemap):
            break

        draw_from = [max(pos[0] - maxcol // 2, 0),
                     max(pos[1] - maxrow // 2, 0)]
        for i in range(maxrow):
            for j in range(maxcol):
                if i >= len(treemap):
                    stdscr.addstr(i, j, ' ')
                elif has_tree(j+draw_from[0], i+draw_from[1]):
                    stdscr.addstr(
                        i, j, '#', curses.color_pair(curses.COLOR_GREEN))
                else:
                    stdscr.addstr(i, j, '.')
        stdscr.addstr(pos[1], pos[0], '@', curses.color_pair(curses.COLOR_RED))
        stdscr.addstr(min(len(treemap)-draw_from[1], maxrow), 0, f'collisions: {collisions}')
        stdscr.refresh()
    while ((ch := stdscr.getch()) == -1):  # -1 means no more input
        pass


curses.wrapper(main)
